# Generated by Django 5.0.7 on 2025-10-02 00:08

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import main.models
import main.tenancy.managers
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('role', models.CharField(choices=[('superadmin', 'Super Admin'), ('owner', 'School Owner'), ('admin', 'Admin'), ('staff', 'Staff'), ('student', 'Student'), ('parent', 'Parent')], default='student', max_length=10)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to='')),
                ('phone', models.CharField(default='+234----', max_length=20)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', main.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('next_session_begins', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_current'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('file', models.FileField(help_text='The actual file that was uploaded', upload_to='attachments/%Y/%m/%d/')),
                ('display_name', models.CharField(blank=True, default='', help_text='Original name of the uploaded file', max_length=255, null=True)),
                ('file_size', models.PositiveIntegerField(blank=True, default=0, help_text='Size of the file in bytes', null=True)),
                ('file_type', models.CharField(blank=True, default='', help_text='MIME type of the file', max_length=100, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the file', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_attachments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'ordering': ['-created_at'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(choices=[('Basic1', 'Basic 1'), ('Basic2', 'Basic 2'), ('Basic3', 'Basic 3'), ('Basic4', 'Basic 4'), ('Basic5', 'Basic 5'), ('Basic6', 'Basic 6'), ('KG1', 'Kindergarten 1'), ('KG2', 'Kindergarten 2'), ('KG3', 'Kindergarten 3'), ('PRY1', 'Primary 1'), ('PRY2', 'Primary 2'), ('PRY3', 'Primary 3'), ('PRY4', 'Primary 4'), ('PRY5', 'Primary 5'), ('PRY6', 'Primary 6'), ('JS1', 'Junior Secondary 1'), ('JS2', 'Junior Secondary 2'), ('JS3', 'Junior Secondary 3'), ('SS1', 'Senior Secondary 1'), ('SS2', 'Senior Secondary 2'), ('SS3', 'Senior Secondary 3')], max_length=10)),
                ('category', models.CharField(choices=[('KG', 'Kindergarten'), ('PRIMARY', 'Primary'), ('JSS', 'Junior Secondary'), ('SSS', 'Senior Secondary'), ('BASIC', 'Basic Education')], max_length=12)),
                ('department', models.CharField(choices=[('GENERAL', 'General'), ('ART', 'Art Class'), ('SCIENCE', 'Science Class'), ('COMMERCIAL', 'Commercial Class'), ('SCIENCE_TECH', 'Science & Technology Class'), ('TECHNICAL', 'Technical Class')], default='GENERAL', help_text='Academic department/specialization (mainly for SSS)', max_length=20)),
                ('level_order', models.PositiveIntegerField(help_text='Sequential order for progression (1,2,3,...)')),
                ('default_capacity', models.PositiveIntegerField(default=50)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['category', 'level_order', 'department'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('division', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G'), ('H', 'H'), ('I', 'I'), ('J', 'J'), ('K', 'K'), ('L', 'L'), ('M', 'M'), ('N', 'N'), ('O', 'O'), ('P', 'P'), ('Q', 'Q'), ('R', 'R'), ('S', 'S'), ('T', 'T'), ('U', 'U'), ('V', 'V'), ('W', 'W'), ('X', 'X'), ('Y', 'Y'), ('Z', 'Z')], default='A', max_length=1)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('academic_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='main.academicsession')),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_instances', to='main.classlevel')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['academic_session', 'class_level__level_order', 'division'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(help_text='Title of the announcement', max_length=200)),
                ('content', models.TextField(help_text='Full content of the announcement')),
                ('target_roles', models.JSONField(default=list, help_text="List of user roles this announcement is for (e.g., ['student', 'staff']). Empty means all roles.")),
                ('is_published', models.BooleanField(default=True, help_text='Whether this announcement is visible to its target audience')),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When this announcement should become visible')),
                ('expire_date', models.DateField(blank=True, help_text='When this announcement should expire (optional)', null=True)),
                ('created_by', models.ForeignKey(help_text='User who created this announcement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_announcements', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('attachments', models.ManyToManyField(blank=True, help_text='Files attached to this announcement', related_name='announcement_attachments', to='main.attachment')),
                ('classes', models.ManyToManyField(blank=True, help_text='Specific classes this announcement targets (leave empty for all classes)', related_name='announcements', to='main.classlist')),
            ],
            options={
                'ordering': ['-publish_date'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Full name of the school', max_length=100)),
                ('address', models.TextField(default='', help_text='Full physical address of the school')),
                ('phone', models.CharField(db_index=True, help_text='Primary contact number for the school', max_length=20)),
                ('email', models.EmailField(db_index=True, help_text='Primary contact email for the school', max_length=254)),
                ('website', models.URLField(blank=True, help_text="School's website URL", null=True)),
                ('motto', models.CharField(blank=True, default='', help_text="School's motto or tagline", max_length=255)),
                ('about', models.TextField(blank=True, default='', help_text='Detailed description of the school')),
                ('logo', models.ImageField(blank=True, default='schools/logos/default.png', help_text="School's logo image", null=True, upload_to='schools/logos/%Y/%m/%d/')),
                ('short_name', models.CharField(blank=True, db_index=True, help_text="Abbreviated name for the school (e.g., 'Hogwarts' for 'Hogwarts School of Witchcraft and Wizardry')", max_length=50, null=True)),
                ('subdomain', models.CharField(blank=True, db_index=True, help_text='Unique subdomain identifier for the school (auto-generated if not provided)', max_length=20, null=True, unique=True)),
                ('code', models.CharField(blank=True, db_index=True, help_text='Unique code identifier for the school (auto-generated if not provided)', max_length=10, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether the school account is active')),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('subscription_plan', models.CharField(blank=True, help_text='Current subscription plan', max_length=50, null=True)),
                ('subscription_expiry', models.DateField(blank=True, help_text='Date when the current subscription expires', null=True)),
                ('settings', models.JSONField(blank=True, default=dict, help_text='JSON field for storing school-specific settings')),
                ('schema_name', models.CharField(blank=True, help_text='Schema name for the school', max_length=50, null=True)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('owner', models.OneToOneField(help_text='User account that owns this school', on_delete=django.db.models.deletion.PROTECT, related_name='owned_school', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
                'ordering': ['name'],
                'permissions': [('view_school_dashboard', 'Can view school dashboard'), ('manage_school_settings', 'Can manage school settings')],
            },
        ),
        migrations.CreateModel(
            name='LessonPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('uploaded_file', models.FileField(upload_to='uploads/%Y/%m/%d/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.classlist')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_plans', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=50)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='class_notes_attachments/')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='main.classlist')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_notes', to=settings.AUTH_USER_MODEL)),
                ('lesson_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_notes', to='main.lessonplan')),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='classlist',
            name='school',
            field=models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school'),
        ),
        migrations.AddField(
            model_name='classlevel',
            name='school',
            field=models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('request_path', models.CharField(blank=True, max_length=512, verbose_name='request path')),
                ('request_method', models.CharField(blank=True, max_length=8, verbose_name='request method')),
                ('status_code', models.PositiveIntegerField(default=0, verbose_name='status code')),
                ('success', models.BooleanField(default=True, verbose_name='success')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='timestamp')),
                ('action', models.CharField(choices=[('request', 'Request'), ('retrieve', 'Retrieve'), ('list', 'List'), ('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout')], db_index=True, max_length=10, verbose_name='action')),
                ('model', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='model')),
                ('object_id', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='object ID')),
                ('changes', models.JSONField(blank=True, default=dict, verbose_name='changes')),
                ('extra', models.JSONField(blank=True, default=dict, verbose_name='extra data')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to='main.school', verbose_name='school')),
            ],
            options={
                'verbose_name': 'audit log',
                'verbose_name_plural': 'audit logs',
                'ordering': ['-timestamp'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='attachment',
            name='school',
            field=models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school'),
        ),
        migrations.CreateModel(
            name='AnnouncementView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('announcement', models.ForeignKey(help_text='The announcement that was viewed', on_delete=django.db.models.deletion.CASCADE, related_name='views', to='main.announcement')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who viewed the announcement', on_delete=django.db.models.deletion.CASCADE, related_name='announcement_views', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
            ],
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnnouncementExpire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('days', models.PositiveIntegerField(default=30, help_text='Default number of days before an announcement expires if no expiration date is set')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
            ],
            options={
                'verbose_name': 'Announcement Expiration Setting',
                'verbose_name_plural': 'Announcement Expiration Settings',
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnnouncementComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('content', models.TextField(help_text='The comment text')),
                ('announcement', models.ForeignKey(help_text='The announcement this comment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='main.announcement')),
                ('author', models.ForeignKey(help_text='User who wrote this comment', on_delete=django.db.models.deletion.CASCADE, related_name='announcement_comments', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
            ],
            options={
                'ordering': ['created_at'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='announcement',
            name='school',
            field=models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school'),
        ),
        migrations.AddField(
            model_name='academicsession',
            name='school',
            field=models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school'),
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, help_text='School this user belongs to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='main.school'),
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('department', models.CharField(blank=True, max_length=15, null=True)),
                ('is_teaching_staff', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['school', 'department'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='classlist',
            name='class_teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_classes', to='main.staff'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('reg_no', models.CharField(blank=True, max_length=20, null=True)),
                ('student_id', models.CharField(blank=True, max_length=20, null=True)),
                ('date_of_birth', models.DateField()),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('session_admitted', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admitted_students', to='main.academicsession')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('left_at', models.DateTimeField(blank=True, help_text='Timestamp when this enrollment was deactivated', null=True)),
                ('promoted', models.BooleanField(default=False)),
                ('promotion_date', models.DateField(blank=True, null=True)),
                ('final_grade', models.CharField(blank=True, max_length=5)),
                ('remarks', models.TextField(blank=True)),
                ('academic_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main.academicsession')),
                ('class_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main.classlist')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='main.student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(blank=True, max_length=10)),
                ('description', models.TextField(blank=True)),
                ('is_core', models.BooleanField(default=True, help_text='Core subjects are mandatory')),
                ('applicable_categories', models.JSONField(default=list, help_text='Category codes this applies to; [] = all')),
                ('applicable_departments', models.JSONField(default=list, help_text='Department codes this applies to; [] = all')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='lessonplan',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_plans', to='main.subject'),
        ),
        migrations.CreateModel(
            name='GmeetClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField()),
                ('gmeet_link', models.URLField()),
                ('start_time', models.DateTimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['teacher', 'admin', 'owner']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gmeets', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gmeet_classes', to='main.subject')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassSubjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('class_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_assignments', to='main.classlist')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subject_assignments', to='main.staff')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_assignments', to='main.subject')),
            ],
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(choices=[('1st', '1st Term'), ('2nd', '2nd Term'), ('3rd', '3rd Term')], max_length=4)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('next_term_begins', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('academic_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='main.academicsession')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('code', models.SlugField(help_text='Short code, e.g. TUITION', max_length=40)),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('is_income', models.BooleanField(default=True, help_text='Income=True, Expense=False')),
                ('active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('default_objects', django.db.models.manager.Manager()),
                ('objects', main.tenancy.managers.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('payer_kind', models.CharField(choices=[('student', 'Student'), ('parent', 'Parent'), ('teacher', 'Teacher')], help_text='Declared payer kind', max_length=12)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('currency', models.CharField(default='NGN', max_length=3)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SUCCESS', 'Successful'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=10)),
                ('method', models.CharField(choices=[('CASH', 'Cash'), ('BANK_TRANSFER', 'Bank Transfer'), ('POS', 'POS'), ('ONLINE', 'Online'), ('CHEQUE', 'Cheque'), ('ADJUSTMENT', 'Manual Adjustment')], default='ONLINE', max_length=16)),
                ('reference', models.CharField(help_text='Gateway reference / receipt no. Unique within a school', max_length=64)),
                ('gateway', models.CharField(blank=True, default='', help_text='e.g., paystack, flutterwave', max_length=32)),
                ('narration', models.TextField(blank=True, default='')),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions_created', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, help_text='User who deleted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('payer_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='main.staff')),
                ('payer_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='main.student')),
                ('payer_user', models.ForeignKey(help_text='Principal payer user (role must be Parent/Student/Staff)', limit_choices_to=models.Q(('role__in', ['parent', 'student', 'staff'])), on_delete=django.db.models.deletion.PROTECT, related_name='payments_made', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='The school this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='school_%(class)ss', to='main.school')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('transaction_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='main.transactiontype')),
            ],
            options={
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', main.models.TransactionManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['name'], name='school_name_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['code'], name='school_code_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['subdomain'], name='school_subdomain_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['email'], name='school_email_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['is_active'], name='school_active_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['subscription_expiry'], name='school_sub_expiry_idx'),
        ),
        migrations.AddIndex(
            model_name='classnote',
            index=models.Index(fields=['school', 'created_at'], name='main_classn_school__58675b_idx'),
        ),
        migrations.AddIndex(
            model_name='classnote',
            index=models.Index(fields=['created_at'], name='main_classn_created_d6923c_idx'),
        ),
        migrations.AddIndex(
            model_name='classlevel',
            index=models.Index(fields=['school', 'category'], name='main_classl_school__84def4_idx'),
        ),
        migrations.AddIndex(
            model_name='classlevel',
            index=models.Index(fields=['school', 'level_order'], name='main_classl_school__844b0e_idx'),
        ),
        migrations.AddIndex(
            model_name='classlevel',
            index=models.Index(fields=['school', 'department'], name='main_classl_school__096479_idx'),
        ),
        migrations.AddConstraint(
            model_name='classlevel',
            constraint=models.UniqueConstraint(fields=('school', 'name', 'department'), name='uniq_level_name_dept_per_school'),
        ),
        migrations.AddConstraint(
            model_name='classlevel',
            constraint=models.UniqueConstraint(fields=('school', 'level_order', 'department'), name='uniq_level_order_per_dept'),
        ),
        migrations.AddConstraint(
            model_name='classlevel',
            constraint=models.CheckConstraint(check=models.Q(('default_capacity__gte', 0)), name='level_capacity_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='classlevel',
            constraint=models.CheckConstraint(check=models.Q(('level_order__gte', 1)), name='level_order_positive'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['-timestamp', 'action'], name='main_auditl_timesta_7c8cc9_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['model', 'object_id'], name='main_auditl_model_2164de_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['school', 'timestamp'], name='main_auditl_school__818d7a_idx'),
        ),
        migrations.AddIndex(
            model_name='announcementview',
            index=models.Index(fields=['announcement', 'user'], name='main_announ_announc_38d517_idx'),
        ),
        migrations.AddIndex(
            model_name='announcementview',
            index=models.Index(fields=['viewed_at'], name='main_announ_viewed__3b17ad_idx'),
        ),
        migrations.AddConstraint(
            model_name='announcementview',
            constraint=models.UniqueConstraint(fields=('announcement', 'user'), name='unique_announcement_view'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['school', 'is_published', 'publish_date'], name='main_announ_school__d4ab95_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['expire_date'], name='main_announ_expire__503520_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='academicsession',
            unique_together={('school', 'name')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='main_user_usernam_b7ac05_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='main_user_email_6be720_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['school'], name='main_user_school__230abe_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(condition=models.Q(('email__isnull', False), models.Q(('email', ''), _negated=True), ('school__isnull', False)), fields=('email', 'school'), name='uniq_email_per_school'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username',), name='uniq_username'),
        ),
        migrations.AddIndex(
            model_name='classlist',
            index=models.Index(fields=['school', 'academic_session'], name='main_classl_school__d1663a_idx'),
        ),
        migrations.AddIndex(
            model_name='classlist',
            index=models.Index(fields=['school', 'class_level'], name='main_classl_school__c51f27_idx'),
        ),
        migrations.AddConstraint(
            model_name='classlist',
            constraint=models.UniqueConstraint(fields=('class_level', 'academic_session', 'division', 'school'), name='uniq_classlist_per_session_level_division'),
        ),
        migrations.AddConstraint(
            model_name='classlist',
            constraint=models.CheckConstraint(check=models.Q(('capacity__isnull', True), ('capacity__gte', 0), _connector='OR'), name='classlist_capacity_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(condition=models.Q(('student_id__isnull', False)), fields=('school', 'student_id'), name='uniq_student_id_per_school'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(condition=models.Q(('reg_no__isnull', False)), fields=('school', 'reg_no'), name='uniq_reg_no_per_school'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(fields=('school', 'user'), name='uniq_user_per_school'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['school', 'class_list', 'is_active'], name='main_studen_school__6c52cf_idx'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['student', 'is_active'], name='main_studen_student_20f024_idx'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['academic_session', 'is_active'], name='main_studen_academi_568ebb_idx'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['enrollment_date'], name='main_studen_enrollm_f9cbc9_idx'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['left_at'], name='main_studen_left_at_0b6ddf_idx'),
        ),
        migrations.AddIndex(
            model_name='studentenrollment',
            index=models.Index(fields=['promotion_date'], name='main_studen_promoti_3331c0_idx'),
        ),
        migrations.AddConstraint(
            model_name='studentenrollment',
            constraint=models.UniqueConstraint(fields=('student', 'class_list', 'school'), name='uniq_student_in_exact_classlist'),
        ),
        migrations.AddConstraint(
            model_name='studentenrollment',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('school', 'student', 'academic_session'), name='uniq_active_enrollment_per_session'),
        ),
        migrations.AddIndex(
            model_name='subject',
            index=models.Index(fields=['school', 'is_core'], name='main_subjec_school__5cce6c_idx'),
        ),
        migrations.AddConstraint(
            model_name='subject',
            constraint=models.UniqueConstraint(fields=('school', 'code'), name='uniq_subject_code_per_school'),
        ),
        migrations.AddIndex(
            model_name='lessonplan',
            index=models.Index(fields=['school', 'created_at'], name='main_lesson_school__86e125_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonplan',
            index=models.Index(fields=['created_at'], name='main_lesson_created_7458f1_idx'),
        ),
        migrations.AddIndex(
            model_name='gmeetclass',
            index=models.Index(fields=['school', 'created_at'], name='main_gmeetc_school__e33a00_idx'),
        ),
        migrations.AddIndex(
            model_name='gmeetclass',
            index=models.Index(fields=['created_at'], name='main_gmeetc_created_f4f891_idx'),
        ),
        migrations.AddIndex(
            model_name='classsubjectassignment',
            index=models.Index(fields=['school', 'class_list'], name='main_classs_school__85236a_idx'),
        ),
        migrations.AddIndex(
            model_name='classsubjectassignment',
            index=models.Index(fields=['school', 'teacher'], name='main_classs_school__1360a9_idx'),
        ),
        migrations.AddIndex(
            model_name='classsubjectassignment',
            index=models.Index(fields=['is_active'], name='main_classs_is_acti_6e5c3e_idx'),
        ),
        migrations.AddConstraint(
            model_name='classsubjectassignment',
            constraint=models.UniqueConstraint(fields=('class_list', 'subject'), name='uniq_subject_per_classlist'),
        ),
        migrations.AlterUniqueTogether(
            name='term',
            unique_together={('academic_session', 'name')},
        ),
        migrations.AddIndex(
            model_name='transactiontype',
            index=models.Index(fields=['school', 'is_income', 'active'], name='main_transa_school__99a8f4_idx'),
        ),
        migrations.AddIndex(
            model_name='transactiontype',
            index=models.Index(fields=['school', 'code'], name='main_transa_school__ec3fe0_idx'),
        ),
        migrations.AddConstraint(
            model_name='transactiontype',
            constraint=models.UniqueConstraint(fields=('school', 'code'), name='uniq_trxtype_code_per_school'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['school', 'status'], name='main_transa_school__f37db2_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['school', 'transaction_type'], name='main_transa_school__a4f971_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['school', 'payer_user'], name='main_transa_school__6818c6_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['school', 'paid_at'], name='main_transa_school__167c9c_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['reference'], name='main_transa_referen_a313c6_idx'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.UniqueConstraint(fields=('school', 'reference'), name='uniq_txn_ref_per_school'),
        ),
        migrations.AddConstraint(
            model_name='transaction',
            constraint=models.CheckConstraint(check=models.Q(('amount__gt', 0)), name='txn_amount_positive'),
        ),
    ]
